<h3 style="color:#0000FF;">The Ruby Challenge</h3>
<p><img class="alignright" src='http://rubylearning.com/images/rubypc.jpg' style="border: 0px none ;" alt="RPCFN" title="Ruby Programming Challenge For Newbies" /></p>
<p><b>Difficulty</b>: Ruby beginner.</p>
<p><b>Goals</b>: Basic control over Ruby elements, specially command line scripting.</p>
<p><b>Description</b>: There are several ways to subtitle a movie nowadays, and one of the most well known format is the SubRip format (<a href="http://en.wikipedia.org/wiki/SubRip">http://en.wikipedia.org/wiki/SubRip</a>). It has entries like these:</p>
<pre>645
01:31:51,210 --> 01:31:54,893
the government is implementing a new policy...

646
01:31:54,928 --> 01:31:57,664
In connection with a dramatic increase
in crime in certain neighbourhoods,
</pre>
<p>Each line has an increasing integer identification, then comes the time range (start and end time) in the format &#8220;hours:minutes:seconds,milliseconds&#8221;. The decimal separator used is the comma. Finally there are the subtitles themselves and a line break marks the end of an entry.</p>
<p>Sometimes the timing is shifted for a small amount, 2 or 3 seconds. Then comes the trouble when you need to shift everything a few seconds back or ahead.</p>
<p>The goal is to create a small command line script in Ruby that will read an SRT file, and output another one with the new calculated times.</p>
<p>So, for example, if I want to shift everything 2,500 (2 seconds and 500 milliseconds) ahead, I would start with this:</p>
<pre>01:32:04,283 --> 01:32:07,769
</pre>
<p>and end up with:</p>
<pre>01:32:06,783 --> 01:32:10,269
</pre>
<p>The command line should accept arguments such as:</p>
<pre>shift_subtitle --operation add --time 02,110 input_file output_file
</pre>
<p>This means &#8220;&#45;&#45;operation&#8221; can accept either &#8216;add&#8217; or &#8216;sub&#8217; to add or subtract times. The &#8220;&#45;&#45;time&#8221; will accept the amount of time to shift in the format 11,222 where &#8220;11&#8243; is the amount of seconds and &#8220;222&#8243; the amount of milliseconds.</p>
<p><b>Requirements</b>: This has to be a pure Ruby script, using only the Ruby Standard Libraries (meaning, no external Gems).</p>
<p>It has to implement &#8220;optparse&#8221; to parse the command line arguments.</p>
<p>As an observation, bear in mind that the first thing that you might attempt will look like this:</p>
<pre>a = Time.at(04,283)
b = a + 2.500
puts b.usec
=> 500283
</pre>
<p>This is wrong, the proper result should&#8217;ve been &#8220;783&#8243; (as in the example in the previous section). So it means that you will have to find another way out.</p>
<p><b>Extras (Optional)</b>: If you want:</p>
<ul>
<li>It would be interesting to exercise the process of a Gem creation. So you would have to package your script.</li>
<li>Another thing that would be good is to have RSpec unit tests covering your code, to exercise software development best practices.</li>
</ul>
<p><b>(Note that the above two points are optional and not a requirement).</b></p>
<h3 style="color:#0000FF;">How to Enter the Challenge</h3>
